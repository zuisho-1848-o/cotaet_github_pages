/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/chat/chat.ts":
/*!**************************!*\
  !*** ./src/chat/chat.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// type ChatTypeWithOption = \"radio\" | \"checkBox\" | \"multiTags\";\n// type ChatTypeNoOption = \"textOnly\" | \"pdf\";\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// class ChatData {\n//     version: string;\n//     type: ChatTypeWithOption | ChatTypeNoOption;\n//     text: string;\n//     constructor(version: string, type: ChatTypeWithOption | ChatTypeNoOption, text: string) {\n//         this.version = version;\n//         this.type = type;\n//         this.text = text;\n//     }\n// }\n// class ChatManager {\n//     version: string;\n//     type: string;\n// }\n// class ChatController {\n// }\n// class ChatManager {\n//     constructor(defaultSleepTime, chatElementClassName, chatMainElementClassName) {\n//         this.chat = document.getElementsByClassName(chatElementClassName)[0];\n//         this.chatMain = document.getElementsByClassName(chatMainElementClassName)[0];\n//         this.defaultSleepTime = defaultSleepTime;\n//     }\n//     /**\n//     * Chat にbot からの textChat を代入する\n//     * @param {string} inputText - textChat の text\n//     */\n//     async insertTextChatFromBot(inputText, sleepTime=this.defaultSleepTime, id=undefined) {\n//         console.log(inputText);\n//         const texts = inputText.split(\"\\n\");\n//         console.log(texts);\n//         for(let text of texts) {\n//             text = text.split(\"＊\").join(\"<br>\");\n//             await sleep(sleepTime);\n//             let insertHTML = `<div class='chatMessageBlock chatFromBot'`\n//             if(id) {\n//                 insertHTML += ` id=\"${id}\"`\n//             }\n//             insertHTML += `'>${text}</div>`\n//             this.chatMain.insertAdjacentHTML(\"beforeend\", insertHTML);\n//             this.chatMain.scrollTop = this.chatMain.scrollHeight;\n//             sleepTime = this.defaultSleepTime;  // これがないと sleepTime が0などで渡された時に全部のメッセージが一瞬で出てしまう。\n//         }\n//     }\n// }\n// // class utilities {\n// //     constructor() {}\n// //     sleep() {}\n// // }\nvar defaultSleepTime = 500;\nvar chat = document.getElementsByClassName(\"chat\")[0];\nvar chatMain = document.getElementsByClassName(\"chatMain\")[0];\nvar chatTextInput = document.getElementById(\"chatText\");\nvar tags = [\n    {\n        category: \"ターゲット業種\",\n        values: [\"学校\", \"高校\", \"大学\", \"専門学校\", \"専門スクール\"],\n        id: \"tag1\"\n    }, {\n        category: \"ターゲット年代\",\n        values: [\"12-15歳\", \"15-18歳\", \"18-22歳\", \"22歳以上\"],\n        id: \"tag2\"\n    }, {\n        category: \"媒体\",\n        values: [\"tiktok\", \"Instagram\", \"Google\", \"Twitter\"],\n        id: \"tag3\"\n    }, {\n        category: \"KPI\",\n        values: [\"認知アップ\", \"獲得アップ\"],\n        id: \"tag4\"\n        // ここの回答で分岐\n        // A\n        // フォロワー数増加\n        // ブランディング\n        // B\n        // 資料請求\n        // 問い合わせ\n        // 体験会参加\n        // セミナー参加\n        // 申込\n    }, {\n        category: \"手法\",\n        values: [\"コンテンツ軸\", \"運営軸\"],\n        id: \"tag5\"\n        // ・コンテンツ軸↓\n        // 動画活用\n        // SNS活用\n        // ライティング、記事コンテンツ\n        // SEO\n        // 画像、バナー制作\n        // 音声\n        // ・運営軸↓\n        // リソース、ヒト不足\n        // 後継者、後任者探し\n        // ノウハウ不足\n        // やり方が不明\n        // 戦略の作り方が不明\n        // 資金不足\n        // 適正な投資コスト不明\n        // 費用対効果の測り方が不明\n    }, {\n        category: \"コスト\",\n        values: [\"月額固定費\", \"スポット費用\"],\n        id: \"tag6\"\n    }, {\n        category: \"強み\",\n        values: [\"丸投げOK運用\", \"効果に紐づく企画\", \"戦略から構築\"],\n        id: \"tag7\"\n    }\n];\n/**\n * 指定したミリ秒、非同期で待機する。\n * @param {number} milliSeconds - 何ミリ秒待つか\n * @returns {Promise<null>}\n*/\nvar sleep = function (milliSeconds) { return new Promise(function (resolve) { return setTimeout(resolve, milliSeconds); }); };\n/**\n * Chat にbot からの textChat を代入する\n * @param {Element} element - bot からの textChat を代入する HTML 要素\n * @param {string} qText - textChat の text\n */\nvar insertTextChatFromBot = function (element, qText, sleepTime, id) {\n    if (sleepTime === void 0) { sleepTime = defaultSleepTime; }\n    if (id === void 0) { id = undefined; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var texts, _i, texts_1, text, insertHTML;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    console.log(qText);\n                    texts = qText.split(\"\\n\");\n                    console.log(texts);\n                    _i = 0, texts_1 = texts;\n                    _a.label = 1;\n                case 1:\n                    if (!(_i < texts_1.length)) return [3 /*break*/, 4];\n                    text = texts_1[_i];\n                    text = text.split(\"＊\").join(\"<br>\");\n                    return [4 /*yield*/, sleep(sleepTime)];\n                case 2:\n                    _a.sent();\n                    insertHTML = \"<div class='chatMessageBlock chatFromBot'\";\n                    if (id) {\n                        insertHTML += \" id=\\\"\".concat(id, \"\\\"\");\n                    }\n                    insertHTML += \"'>\".concat(text, \"</div>\");\n                    element.insertAdjacentHTML(\"beforeend\", insertHTML);\n                    element.scrollTop = element.scrollHeight;\n                    sleepTime = defaultSleepTime; // これがないと sleepTime が0などで渡された時に全部のメッセージが一瞬で出てしまう。\n                    _a.label = 3;\n                case 3:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n};\n/**\n * 単一選択のdiv要素を作り挿入する\n * @param {Element} element - 単一選択 を代入する HTML 要素\n * @param {Array<TextChoiceOption>} options - 選択肢の配列。\n * @param {string} KQHTMLId - 質問のid。単一選択全体に共通する name 属性やその内部要素の id に使う。\n * @param {string} qType - 質問の形式。id や name 要素に使う。\n * @param {Array<TextChoiceOption>} answers - 過去の回答を元にcheckedを再現する時の過去の回答。\n * @returns\n */\nvar insertSingleChoiceBlock = function (element, options, KQHTMLId) { return __awaiter(void 0, void 0, void 0, function () {\n    var insertHTML, i, option, optionId, checked;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                insertHTML = \"<div class=\\\"chatMessageBlock choiceBlock\\\" id=\\\"\".concat(KQHTMLId + \"-choiceBlock\", \"\\\">\\n\");\n                // let answeredIDList = getAnsweredIDList(answers, KQHTMLId);\n                for (i in options) {\n                    option = options[i];\n                    optionId = \"\" + (+i + 1);\n                    checked = \"\";\n                    // if(answeredIDList.includes(optionId)) checked = \"checked\";\n                    insertHTML +=\n                        \"<div>\\n    <input id=\\\"\".concat(KQHTMLId + \"-\" + optionId, \"\\\" name=\\\"\").concat(KQHTMLId, \"\\\" value=\\\"\").concat(option.optionText, \"\\\" class=\\\"singleChoiceOptionRadio\\\" type=\\\"radio\\\" \").concat(checked, \">\\n    <label for=\\\"\").concat(KQHTMLId + \"-\" + optionId, \"\\\" class=\\\"singleChoiceOptionLabel\\\">\").concat(option.optionText, \"</label>\\n</div>\\n\");\n                }\n                insertHTML += \"</div>\";\n                return [4 /*yield*/, sleep(defaultSleepTime)];\n            case 1:\n                _a.sent();\n                element.insertAdjacentHTML(\"beforeend\", insertHTML);\n                element.scrollTop = element.scrollHeight;\n                return [2 /*return*/];\n        }\n    });\n}); };\nvar insertPDFInputBlock = function (element) { return __awaiter(void 0, void 0, void 0, function () {\n    var insertHTML;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                insertHTML = \"<div class=\\\"chatMessageBlock choiceBlock\\\" id=\\\"PDFInputBlock\\\">\\n    <input type=\\\"file\\\" id=\\\"PDFInput\\\" accept=\\\".pdf\\\" class=\\\"PDFInput\\\">\\n    <label for=\\\"PDFInput\\\">\\u30A2\\u30C3\\u30D7\\u30ED\\u30FC\\u30C9\\u3059\\u308BPDF\\u3092\\u9078\\u629E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002</label>\\n</div>\";\n                return [4 /*yield*/, sleep(defaultSleepTime)];\n            case 1:\n                _a.sent();\n                element.insertAdjacentHTML(\"beforeend\", insertHTML);\n                element.scrollTop = element.scrollHeight;\n                return [2 /*return*/];\n        }\n    });\n}); };\nvar handlePDFInput = function (chatMain, target) { return __awaiter(void 0, void 0, void 0, function () {\n    var PDF;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                PDF = target.files[0];\n                console.log(PDF.name);\n                console.log(PDF.size);\n                console.log(PDF.type);\n                return [4 /*yield*/, insertTextChatFromBot(chatMain, \"\".concat(PDF.name, \" \\u3068\\u3044\\u3046\\u540D\\u524D\\u306EPDF\\u3092\\u3054\\u767B\\u9332\\u3044\\u305F\\u3060\\u304D\\u3042\\u308A\\u304C\\u3068\\u3046\\u3054\\u3056\\u3044\\u307E\\u3059\\u3002\\n\\u7D9A\\u3044\\u3066\\u3001\\u3053\\u306EPDF\\u306E\\u4F01\\u753B\\u306B\\u5408\\u3046\\u30BF\\u30B0\\u3092\\u6B21\\u304B\\u3089\\u304A\\u9078\\u3073\\u304F\\u3060\\u3055\\u3044\\u3002\"))];\n            case 1:\n                _a.sent();\n                return [4 /*yield*/, insertTags(chatMain, tags[0])];\n            case 2:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n}); };\nvar insertTags = function (element, tag) { return __awaiter(void 0, void 0, void 0, function () {\n    var category, tagValues, id, insertHTML, i, value, HTMLId;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                category = tag.category;\n                tagValues = tag.values;\n                id = tag.id;\n                insertHTML = \"<div class=\\\"chatMessageBlock choiceBlock tagMultiChoiceInputBlock\\\">\\n    <span class=\\\"TagInputTitle\\\">\".concat(category, \"</span>\\n    <div class=\\\"tagMultiChoiceInputLabelBlock\\\" id=\\\"tagMultiChoiceInputLabelBlock-\").concat(id, \"\\\">\\n\");\n                for (i in tagValues) {\n                    value = tagValues[i];\n                    HTMLId = \"tagMultiChoiceInput-\".concat(id, \"-\").concat(i);\n                    insertHTML += \"<input type=\\\"checkbox\\\" class=\\\"tagMultiChoiceInput\\\" id=\\\"\".concat(HTMLId, \"\\\" value=\\\"\").concat(value, \"\\\"></input>\\n    <label for=\\\"\").concat(HTMLId, \"\\\" class=\\\"tagMultiChoiceInputLabel\\\">\").concat(value, \"</label>\\n\");\n                }\n                insertHTML += \"</div>\\n\";\n                insertHTML += \"<input id=\\\"\".concat(\"tagMultiChoiceInput-\" + id + \"-submit\", \"\\\" class=\\\"answerSubmitButton\\\" type=\\\"button\\\" value=\\\"\\u6B21\\u3078\\\" >\\n\");\n                insertHTML += \"</div>\\n\";\n                return [4 /*yield*/, sleep(defaultSleepTime)];\n            case 1:\n                _a.sent();\n                element.insertAdjacentHTML(\"beforeend\", insertHTML);\n                element.scrollTop = element.scrollHeight;\n                return [2 /*return*/];\n        }\n    });\n}); };\nvar handleAnswerSubmit = function (element, target) { return __awaiter(void 0, void 0, void 0, function () {\n    var submitId, tagId, tagIndex, category, tagInputs, checkedTagInputs, checkedTagTexts;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                submitId = target.id;\n                tagId = submitId.split(\"-\")[1];\n                tagIndex = tags.findIndex(function (tag) { return tag.id == tagId; });\n                category = tags[tagIndex].category;\n                tagInputs = document.querySelectorAll(\"#tagMultiChoiceInputLabelBlock-\".concat(tagId, \" input\"));\n                console.log(tagInputs);\n                checkedTagInputs = __spreadArray([], tagInputs, true).filter(function (elem) { return elem.checked; });\n                checkedTagTexts = checkedTagInputs.map(function (elem) { return elem.value; });\n                console.log(checkedTagTexts);\n                return [4 /*yield*/, insertTextChatFromBot(element, \"\".concat(category, \" \\u306F \").concat(checkedTagTexts.join(\", \"), \" \\u3067\\u3059\\u306D\\u3002\"))];\n            case 1:\n                _a.sent();\n                if (!(tags.length > tagIndex + 1)) return [3 /*break*/, 3];\n                return [4 /*yield*/, insertTags(element, tags[tagIndex + 1])];\n            case 2:\n                _a.sent();\n                return [3 /*break*/, 6];\n            case 3: return [4 /*yield*/, insertTextChatFromBot(element, \"ここまでを元にあなた向けの質問を作成しました。質問のデモを行いますか？\")];\n            case 4:\n                _a.sent();\n                return [4 /*yield*/, insertSingleChoiceBlock(element, [{ optionText: \"はい\", nextQId: \"\" }, { optionText: \"いいえ\", nextQId: \"\" }], \"q0\")];\n            case 5:\n                _a.sent();\n                _a.label = 6;\n            case 6: return [2 /*return*/];\n        }\n    });\n}); };\nvar handleTextSubmit = function (element) { return __awaiter(void 0, void 0, void 0, function () {\n    var text, insertHTML;\n    return __generator(this, function (_a) {\n        text = (chatTextInput === null || chatTextInput === void 0 ? void 0 : chatTextInput.value) || \"\";\n        text = text.replace(/ /g, \"\").replace(/\\n/g, \"\").replace(/\\t/g, \"\");\n        if (!text)\n            return [2 /*return*/];\n        insertHTML = \"<div class='chatMessageBlock chatFromUser'>\".concat(text, \"</div>\");\n        element.insertAdjacentHTML(\"beforeend\", insertHTML);\n        element.scrollTop = element.scrollHeight;\n        if (chatTextInput === null || chatTextInput === void 0 ? void 0 : chatTextInput.value) {\n            chatTextInput.value = \"\";\n        }\n        return [2 /*return*/];\n    });\n}); };\nfunction main() {\n    return __awaiter(this, void 0, void 0, function () {\n        var matterText;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    matterText = decodeURI(window.location.href.split(\"=\")[2]);\n                    return [4 /*yield*/, insertTextChatFromBot(chatMain, \"\\u3054\\u7528\\u4EF6\\u306F\\u3001\\\"\".concat(matterText, \"\\\" \\u3067\\u3059\\u306D\\u3002\"))];\n                case 1:\n                    _a.sent();\n                    if (matterText != \"プランナーとして登録したい\")\n                        return [2 /*return*/];\n                    return [4 /*yield*/, insertTextChatFromBot(chatMain, \"プランナーとして登録する場合、まずは企画として提案する資料のPDFをご登録いただきます。\\n続いて、その企画に合ったタグをお選びいただくと、そのタグに基づき自動で質問が生成されます。\\nユーザーがこのサイトで広告のプランを探すときには、ここで生成された質問をしていき、あなたの選んだタグに合ったユーザーに対して、あなたの企画が提案されます。\")];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, insertTextChatFromBot(chatMain, \"まず初めに、プランのPDFを登録してください。\")];\n                case 3:\n                    _a.sent();\n                    return [4 /*yield*/, insertPDFInputBlock(chatMain)];\n                case 4:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\n// 増加する可能性のある要素に対する click event をまとめて受け取る\ndocument.addEventListener('click', function (e) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    return __generator(this, function (_p) {\n        switch (_p.label) {\n            case 0:\n                __spreadArray([], document.querySelectorAll(\".choiceBlock\"), true).forEach(function (elem) { elem.style[\"pointer-events\"] = \"none\"; });\n                if (!((_b = (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.contains(\"singleChoiceOptionLabel\"))) return [3 /*break*/, 1];\n                return [3 /*break*/, 6];\n            case 1:\n                if (!(((_d = (_c = e === null || e === void 0 ? void 0 : e.target) === null || _c === void 0 ? void 0 : _c.classList) === null || _d === void 0 ? void 0 : _d.contains(\"chatStart\")) || ((_f = (_e = e === null || e === void 0 ? void 0 : e.target) === null || _e === void 0 ? void 0 : _e.classList) === null || _f === void 0 ? void 0 : _f.contains(\"closeButton\")))) return [3 /*break*/, 2];\n                // chat の開閉を操作\n                (_g = chatStart.classList) === null || _g === void 0 ? void 0 : _g.toggle(\"display-none\");\n                (_h = chat === null || chat === void 0 ? void 0 : chat.classList) === null || _h === void 0 ? void 0 : _h.toggle(\"display-none\");\n                // 必要ならば全画面にする。\n                if (((_k = (_j = e === null || e === void 0 ? void 0 : e.target) === null || _j === void 0 ? void 0 : _j.classList) === null || _k === void 0 ? void 0 : _k.contains(\"closeButton\")) && useFullScreen && document.exitFullscreen)\n                    document.exitFullscreen();\n                return [3 /*break*/, 6];\n            case 2:\n                if (!((_m = (_l = e === null || e === void 0 ? void 0 : e.target) === null || _l === void 0 ? void 0 : _l.classList) === null || _m === void 0 ? void 0 : _m.contains(\"answerSubmitButton\"))) return [3 /*break*/, 4];\n                // 複数選択やテキスト入力に対するクリックイベントを設定\n                return [4 /*yield*/, handleAnswerSubmit(chatMain, e.target)];\n            case 3:\n                // 複数選択やテキスト入力に対するクリックイベントを設定\n                _p.sent();\n                return [3 /*break*/, 6];\n            case 4:\n                if (!(((_o = e === null || e === void 0 ? void 0 : e.target) === null || _o === void 0 ? void 0 : _o.id) == \"chatTextSubmit\")) return [3 /*break*/, 6];\n                return [4 /*yield*/, handleTextSubmit(chatMain)];\n            case 5:\n                _p.sent();\n                _p.label = 6;\n            case 6:\n                setTimeout(function () {\n                    __spreadArray([], document.querySelectorAll(\".choiceBlock\"), true).forEach(function (elem) { elem.style[\"pointer-events\"] = \"auto\"; });\n                }, 2000);\n                return [2 /*return*/];\n        }\n    });\n}); });\ndocument.addEventListener(\"change\", function (e) { return __awaiter(void 0, void 0, void 0, function () {\n    var _a, _b;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                if (!((_b = (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.contains(\"PDFInput\"))) return [3 /*break*/, 2];\n                return [4 /*yield*/, handlePDFInput(chatMain, e.target)];\n            case 1:\n                _c.sent();\n                _c.label = 2;\n            case 2: return [2 /*return*/];\n        }\n    });\n}); });\nmain();\n\n\n\n//# sourceURL=webpack://new_ad_cotaet_chat/./src/chat/chat.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/chat/chat.ts"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;